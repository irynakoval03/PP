openapi: 3.0.1
info:
  title: Резервування аудиторій
  description: На цьому сайті ви зможете резервувати аудиторії. Резервувати аудиторію
    можна на проміжок часу від 1 години до 5 днів. Також ви можете редагувати, скасовувати
    та видаляти їх. Через накладки не завжди аудиторії будуть доступними, тому намагайтеся
    резервувати потрібні Вам аудиторії завчасно.
  contact:
    email: bohdana.honserovska.knm.2020@lpnu.ua
  version: 1.0.0
servers:
- url: https://auditoriumreservation.swagger.io/v2
- url: http://auditoriumreservation.swagger.io/v2
tags:
- name: auditorium
  description: Everything about auditorium
- name: reserve
  description: Reserve an auditorium
- name: user
  description: Operations about user
paths:
  /auditorium:
    post:
      tags:
      - auditorium
      summary: Add an auditorium
      operationId: addAuditorium
      requestBody:
        description: Auditorium which will be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditoriumInput'
        required: true
      responses:
        200:
          description: An auditorium added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditoriumOutput'
        409:
          description: Auditorium already exists with such name.
      security:
      - auditorium_auth:
        - write:auditoriums
        - read:auditoriums
      x-codegen-request-body-name: body
  /auditorium/{auditoriumId}:
    get:
      tags:
      - auditorium
      summary: Find auditorium by ID
      description: Returns a single auditorium
      operationId: getAuditoriumById
      parameters:
      - name: auditoriumId
        in: path
        description: ID of auditorium to be returned
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditoriumOutput'
        404:
          description: Auditorium does not exist with such id.
    put:
      tags:
      - auditorium
      summary: Update an existing auditorium
      operationId: updateAuditorium
      parameters:
      - name: auditoriumId
        in: path
        description: ID of auditorium returned
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Auditorium object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditoriumInput'
        required: true
      responses:
        200:
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditoriumOutput'
        404:
          description: Auditorium does not exist with such id.
        409:
          description: Auditorium already exists with such name.
      security:
      - auditorium_auth:
        - write:auditoriums
        - read:auditoriums
      x-codegen-request-body-name: body
    delete:
      tags:
      - auditorium
      summary: Delete an auditorium
      operationId: deleteAuditorium
      parameters:
      - name: auditoriumId
        in: path
        description: Auditorium id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditoriumOutput'
        404:
          description: Auditorium does not exist with such id.
      security:
      - auditorium_auth:
        - write:auditoriums
        - read:auditoriums
  /auditorium/findByStatus/{status}:
    get:
      tags:
      - auditorium
      summary: Find an auditorium
      description: Multiple status values can be provided with comma separated strings
      operationId: findAuditoriumByStatus
      parameters:
      - name: status
        in: path
        description: Status values that need to be considered for filter
        required: true
        schema:
          type: string
          enum:
          - available
          - taken
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditoriumOutput'
        400:
          description: Auditorium status is not valid
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        200:
          description: An user added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        409:
          description:
                User already exists with such username.
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
      security:
      - auditorium_auth:
        - write:auditoriums
        - read:auditoriums
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        404:
          description: User does not exist with such username.
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Update user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        200:
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        409:
          description: User already exists with such username.
        404:
          description: User does not exist with such username.
      security:
      - auditorium_auth:
        - write:auditoriums
        - read:auditoriums
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: User successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        404:
          description: Reservation does not exist with such id.
      security:
      - auditorium_auth:
        - write:auditoriums
        - read:auditoriums
  /reserve:
    post:
      tags:
      - reserve
      summary: Reserve an auditorium
      operationId: ReserveAuditorium
      requestBody:
        description: Reserved auditorium
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReserveInput'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReserveOutput'
        404:
          description: User does not exist with such username.
        409:
          description: Auditorium is not available at that time.
      security:
      - reserve_auth:
        - write:reserve
        - read:reserve
      x-codegen-request-body-name: body
  /reserve/{reservationId}:
    get:
      tags:
      - reserve
      summary: Find auditorium reservation by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: getOrderById
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReserveOutput'
        404:
          description: Reservation does not exist with such id.
      security:
      - reserve_auth:
        - write:reserve
        - read:reserve
    put:
      tags:
      - reserve
      summary: Update reservation by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: updateReservation
      parameters:
      - name: reservationId
        in: path
        description: ID of the reservation that needs to be updated
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      requestBody:
        description: Reservation that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveInput'
        required: true
      responses:
        200:
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReserveOutput'
        404:
          description: User does not exist with such username.
        409:
          description: Auditorium is not available at that time.
      security:
      - reserve_auth:
        - write:reserve
        - read:reserve
    delete:
      tags:
      - reserve
      summary: Delete reservation by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteReservation
      parameters:
      - name: reservationId
        in: path
        description: ID of the reservation that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReserveOutput'
        404:
          description: Reservation does not exist with such id.
          content: {}
      security:
      - reserve_auth:
        - write:reserve
        - read:reserve
components:
  schemas:
    UserInput:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
    UserOutput:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
    ReserveInput:
      required:
      - begin
      - end
      - auditoriumId
      - userId
      type: object
      properties:
        begin:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        auditoriumId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    ReserveOutput:
      required:
      - begin
      - end
      - id
      - auditoriumId
      - userId
      type: object
      properties:
        begin:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        auditoriumId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    AuditoriumInput:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: "101"
    AuditoriumOutput:
      type: object
      properties:
        audienceId:
          type: integer
          format: int24
        name:
          type: string
          example: "101"
  securitySchemes:
    auditorium_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://auditoriumreservation.swagger.io/oauth/dialog
          scopes:
            write:auditoriums: modify auditoriums in your account
            read:auditoriums: read your auditoriums
    reserve_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://auditoriumreservation.swagger.io/oauth/dialog
          scopes:
            write:reserve: modify reservations in your account
            read:reserve: read your reservations
